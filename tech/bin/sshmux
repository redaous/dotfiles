#!/bin/bash

set -u

# Simple tmux SSH multiplexer.

f_usage() {
    cat <<EOF
USAGE
    $PROG_NAME [ -f FILE ] [ -l USER ] [ -s SESSION_NAME ] SERVER...
    $PROG_NAME -h
    $PROG_NAME -m

OPTIONS
    -f FILE
        Read server names from file FILE instead of the command
        line. Server names listed in FILE must be listed
        one per line. Passing "-" for FILE will read server
        names from STDIN.

    -h
        Display help message and exit.

    -l USER
        Use username USER for SSH login. Defaults
        to local username(whoami).

    -m
        Display full manual and exit.

    -s SESSION_NAME
        Set tmux session name to SESSION_NAME. The
        default tmux session name defaults to the
        last used tmux session name. It falls back to
        "sshmux" if no previous session name is found.
EOF
}

f_manpage() {
    cat <<EOF
NAME
    sshmux - SSH multiplexer

SYNOPSIS
    $PROG_NAME [ -f FILE ] [ -l USER ] [ -s SESSION_NAME ] SERVER...
    $PROG_NAME -h
    $PROG_NAME -m

DESCRIPTION
    sshmux is an SSH multiplexer. Server names can be specified on the command
    line, from a file, or from STDIN. The sshmux command uses the tmux command
    to do all of the hard work.

OPTIONS
    -f FILE
        Read server names from file FILE instead of the command
        line. Server names listed in FILE must be listed
        one per line. Passing "-" for FILE will read server
        names from STDIN.

    -h
        Display help message and exit.

    -l USER
        Use username USER for SSH login. Defaults
        to local username(whoami).

    -m
        Display full manual and exit.

    -s SESSION_NAME
        Set tmux session name to SESSION_NAME. The
        default tmux session name defaults to the
        last used tmux session name. It falls back to
        "sshmux" if no previous session name is found.

LICENSE
   Copyright (c) 2014-2018, Sean Malloy
   All rights reserved.

   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
   conditions are met:

   1. Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.
        
   2. Redistributions in binary form must reproduce the above copyright notice, this list of
      conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        
   3. Neither the name of the copyright holder nor the names of its contributors may be used
      to endorse or promote products derived from this software without specific prior written permission.
        
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
   BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
   SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
   OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

BUGS
    No known bugs at this time.

SEE ALSO
    tmux(1), https://tmux.github.io
EOF
}

# shellcheck source=/dev/null
. "$TMUX_INCLUDE_FILE"

PROG_NAME=$(basename "$0")
readonly PROG_NAME
SESSION_NAME=$PROG_NAME
SSH_LOGIN_NAME="$(whoami)"

INPUT_FILE=""
while getopts "f:hl:ms:" OPTION; do
    case "$OPTION" in
    f)
        INPUT_FILE=$OPTARG
        ;;
    h)
        f_usage
        exit 0
        ;;
    l)
        SSH_LOGIN_NAME=$OPTARG
        ;;
    m)
        f_manpage
        exit 0
        ;;
    s)
        SESSION_NAME=$OPTARG
        ;;
    *)
        echo ""
        f_usage
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

declare -a SERVER_LIST

# Get list of servers from file
if [ -n "$INPUT_FILE" ]; then
    # Read from STDIN
    if [ "$INPUT_FILE" == "-" ]; then
        while read -r server; do
            SERVER_LIST+=("$server")
        done </dev/stdin
    fi

    # Read from file
    if [ "$INPUT_FILE" != "-" ]; then
        if [ ! -f "$INPUT_FILE" ]; then
            echo "ERROR: '$INPUT_FILE' is not a regular file"
            exit 1
        fi
        if [ ! -r "$INPUT_FILE" ]; then
            echo "ERROR: '$INPUT_FILE' permission denied"
            exit 1
        fi
        IFS=$'\n' read -d '' -r -a SERVER_LIST <"$INPUT_FILE"
    fi
else
    # Get list of servers from the CLI
    if [ $# -eq 0 ]; then
        echo "ERROR: missing server to connect to"
        echo ""
        f_usage
        exit 1
    fi
    for server in "$@"; do
        SERVER_LIST+=("$server")
    done
fi

if tmux -L "$TMUX_SOCKET" has -t "$SESSION_NAME"; then
    tmux -L "$TMUX_SOCKET" new-window -t "$SESSION_NAME" -n "$PROG_NAME" "ssh -l $SSH_LOGIN_NAME ${SERVER_LIST[0]}"
    unset "SERVER_LIST[0]"
    for server in "${SERVER_LIST[@]}"; do
        tmux -L "$TMUX_SOCKET" split-window -d -t "$SESSION_NAME:$PROG_NAME" "ssh -l $SSH_LOGIN_NAME $server"
        tmux -L "$TMUX_SOCKET" select-layout -t "$SESSION_NAME:$PROG_NAME" main-horizontal
    done
    tmux -L "$TMUX_SOCKET" set-window-option -t "$SESSION_NAME:$PROG_NAME" synchronize-panes on
    tmux -L "$TMUX_SOCKET" select-layout -t "$SESSION_NAME:$PROG_NAME" tiled
    tmux -L "$TMUX_SOCKET" attach -t "$SESSION_NAME"
else
    tmux -L "$TMUX_SOCKET" new -s "$SESSION_NAME" -n "$PROG_NAME" -d "ssh -l $SSH_LOGIN_NAME ${SERVER_LIST[0]}"
    unset "SERVER_LIST[0]"
    for server in "${SERVER_LIST[@]}"; do
        tmux -L "$TMUX_SOCKET" split-window -d -t "$SESSION_NAME:$PROG_NAME" "ssh -l $SSH_LOGIN_NAME $server"
        tmux -L "$TMUX_SOCKET" select-layout -t "$SESSION_NAME:$PROG_NAME" main-horizontal
    done
    tmux -L "$TMUX_SOCKET" set-window-option -t "$SESSION_NAME:$PROG_NAME" synchronize-panes on
    tmux -L "$TMUX_SOCKET" select-layout -t "$SESSION_NAME:$PROG_NAME" tiled
    tmux -L "$TMUX_SOCKET" attach -t "$SESSION_NAME"
fi
