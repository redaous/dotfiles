#!/bin/bash

# DESCRIPTION
#
# Self extracting shell script to install Sean Malloy's dotfiles.

f_install()
{
    declare -r MATCH=$(grep --text --line-number '^PAYLOAD:$' $0 | cut -d ':' -f 1)
    declare -r PAYLOAD_START=$((MATCH + 1))
    tail -n +$PAYLOAD_START $0 | tar xzf - -C $HOME
}

f_set_env()
{
    if [[ -n $(which facter 2> /dev/null) ]]; then
        OS_VERSION="$(facter osfamily)$(facter operatingsystemmajrelease)" # RedHat, Debian, etc
    else
        # no facter ... must check stuff manually :-(
        if [[ -f /etc/centos-release ]]; then
            OS_VERSION="RedHat$(awk '{print $4}' /etc/centos-release | awk -F. '{print $1}')"
        elif [[ -f /etc/redhat-release ]]; then
            OS_VERSION="RedHat$(awk '{print $7}' /etc/redhat-release | awk -F. '{print $1}')"
        elif [[ -f /etc/debian_version ]]; then
            OS_VERSION="Debian"
        else
            OS_VERSION=""
        fi
    fi

    if [[ $OS_VERSION =~ 'RedHat' ]]; then
        SSH_MAJOR_VERSION="$(rpm -qi openssh-clients | grep ^Version | awk -F: '{print $2}' | sed -e 's/ //g' | cut -b 1-3 | awk -F. '{print $1}')"
        SSH_MINOR_VERSION="$(rpm -qi openssh-clients | grep ^Version | awk -F: '{print $2}' | sed -e 's/ //g' | cut -b 1-3 | awk -F. '{print $2}')"
    elif [[ $OS_VERSION =~ 'Debian' ]]; then
        SSH_MAJOR_VERSION="$(dpkg -s openssh-client | grep ^Version: | awk -F: '{print $3}' | cut -b 1-3 | awk -F. '{print $1}')"
        SSH_MINOR_VERSION="$(dpkg -s openssh-client | grep ^Version: | awk -F: '{print $3}' | cut -b 1-3 | awk -F. '{print $2}')"
    else
        SSH_MAJOR_VERSION=""
        SSH_MINOR_VERSION=""
    fi

    if [[ -z $SSH_MAJOR_VERSION ]]; then
        echo "FATAL ERROR: count not determine ssh major version"
        exit 1
    fi

    if [[ -z $SSH_MINOR_VERSION ]]; then
        echo "FATAL ERROR: count not determine ssh minor version"
        exit 1
    fi

    SSH_CMD=$(which ssh 2> /dev/null)
    GIT_CMD=$(which git 2> /dev/null)
}

f_pre_clean()
{
    # Clean Ununsed Files
    rm -f $HOME/.bash_profile
    rm -rf $HOME/.perlbrew/
    rm -rf $HOME/tech/bin/tmux

    # Clean Up Used Directories Before Install
    rm -rf $HOME/.bash_files/
    rm -rf $HOME/.dzil/
    rm -rf $HOME/.terminfo/
    rm -rf $HOME/.vim/
    rm -rf $HOME/.puppet/var/puppet-module/skeleton/
}

f_setup_fzf()
{
    ln -fs fzf-0.11.1-linux_amd64 $HOME/tech/bin/fzf
}

f_setup_git()
{
    if [[ -n $GIT_CMD ]]; then
        if [[ -z "$DOTFILES_NAME" ]]; then
            read -p "Name: "  DOTFILES_NAME
            echo "DOTFILES_NAME=\"$DOTFILES_NAME\"" >> $ANSWER_FILE
        fi
        $(which git) config --global user.name  "$DOTFILES_NAME"

        if [[ -z $DOTFILES_EMAIL ]]; then
            read -p "Email: " DOTFILES_EMAIL
            echo "DOTFILES_EMAIL=\"$DOTFILES_EMAIL\"" >> $ANSWER_FILE
        fi
        $(which git) config --global user.email "$DOTFILES_EMAIL"
    fi
}

f_setup_github()
{
    if [[ -n $GIT_CMD ]]; then
        if [[ -z $DOTFILES_SETUP_GITHUB ]]; then
            read -p "Setup Github? " DOTFILES_SETUP_GITHUB
            echo "DOTFILES_SETUP_GITHUB=\"$DOTFILES_SETUP_GITHUB\"" >> $ANSWER_FILE
            if [[ "$DOTFILES_SETUP_GITHUB" =  "y" ]]; then
                if [[ -z $DOTFILES_GITHUB_USER ]]; then
                    read -p "Name: "  DOTFILES_GITHUB_USER
                    echo "DOTFILES_GITHUB_USER=\"$DOTFILES_GITHUB_USER\"" >> $ANSWER_FILE
                fi
                $(which git) config --global github.user $DOTFILES_GITHUB_USER
            else
                echo "Skipping Github Configuration!"
            fi
        fi
    fi
}

f_setup_rubygems()
{
    if [[ -z $DOTFILES_RUBY_GEM_SOURCE ]]; then
        read -p "Ruby Gem Source: " DOTFILES_RUBY_GEM_SOURCE
        echo "DOTFILES_RUBY_GEM_SOURCE=\"$DOTFILES_RUBY_GEM_SOURCE\"" >> $ANSWER_FILE
    fi
    cat > ~/.gemrc << EOF
sources:
- $DOTFILES_RUBY_GEM_SOURCE
gem: --bindir ~/tech/bin
EOF
}

f_setup_ssh()
{
    if [[ -z $SSH_CMD ]]; then
        return 0
    fi

    # Setup jump host
    if [[ -z $DOTFILES_SSH_JUMP_HOST ]]; then
        read -p "SSH Jump Host: " DOTFILES_SSH_JUMP_HOST
        echo "DOTFILES_SSH_JUMP_HOST=\"$DOTFILES_SSH_JUMP_HOST\"" >> $ANSWER_FILE
    fi
    sed -i "s/JUMPHOST/$DOTFILES_SSH_JUMP_HOST/g" $HOME/.ssh/config

    # Enable ControlPersist option
    if [[ $SSH_MAJOR_VERSION -gt 5 ]]; then
        echo "Enabling SSH ControlPersist"
        sed -i 's/\#ControlPersist/ControlPersist/g' $HOME/.ssh/config
    elif [[ $SSH_MAJOR_VERSION -eq 5 && $SSH_MINOR_VERSION -ge 6 ]]; then
        echo "Enabling SSH ControlPersist"
        sed -i 's/\#ControlPersist/ControlPersist/g' $HOME/.ssh/config
    fi
}

f_setup_tmux()
{
    if [[ -f $HOME/tech/bin/tmux_${OS_VERSION} ]]; then
        ln -fs tmux_${OS_VERSION} $HOME/tech/bin/tmux
    else
        echo "binary tmux_${OS_VERSION} does not exist"
    fi

    if [[ $SSH_MAJOR_VERSION -gt 5 ]]; then
        echo "Enabling TMUX Proxy Command ssh -W"
        echo ""                                    >> $HOME/.tmux.conf
        echo "### DO NOT EDIT BELOW THIS LINE ###" >> $HOME/.tmux.conf
        echo "bind P command-prompt -p \"Proxy SSH Target: \" \"new-window -n %1 \\\"exec ssh -o ProxyCommand='ssh jump -W %1:22' %1\\\"\" # ssh via proxy" >> $HOME/.tmux.conf
    elif [[ $SSH_MAJOR_VERSION -eq 5 && $SSH_MINOR_VERSION -ge 4 ]]; then
        echo "Enabling TMUX Proxy Command ssh -W"
        echo ""                                    >> $HOME/.tmux.conf
        echo "### DO NOT EDIT BELOW THIS LINE ###" >> $HOME/.tmux.conf
        echo "bind P command-prompt -p \"Proxy SSH Target: \" \"new-window -n %1 \\\"exec ssh -o ProxyCommand='ssh jump -W %1:22' %1\\\"\" # ssh via proxy" >> $HOME/.tmux.conf
    else
        echo "Enabling TMUX Proxy Command nc"
        echo ""                                    >> $HOME/.tmux.conf
        echo "### DO NOT EDIT BELOW THIS LINE ###" >> $HOME/.tmux.conf
        echo "bind P command-prompt -p \"Proxy SSH Target: \" \"new-window -n %1 \\\"exec ssh -o ProxyCommand='ssh jump nc %h 22' %1\\\"\" # ssh via proxy" >> $HOME/.tmux.conf
    fi

    if [[ -z $DOTFILES_ENABLE_TMUX_SCREEN_256_COLOR ]]; then
        read -p "Enable tmux 256 colors? " DOTFILES_ENABLE_TMUX_SCREEN_256_COLOR
        echo "DOTFILES_ENABLE_TMUX_SCREEN_256_COLOR=\"$DOTFILES_ENABLE_TMUX_SCREEN_256_COLOR\"" >> $ANSWER_FILE
    fi
    if [[ $DOTFILES_ENABLE_TMUX_SCREEN_256_COLOR = "y" ]]; then
        sed -i "s/TERMTYPE/screen-256color/g" $HOME/.tmux.conf
    else
        sed -i "s/TERMTYPE/screen/g" $HOME/.tmux.conf
    fi
}

f_setup_tmuxinator()
{
    echo "Configuring Tmuxinator Project: default"
    declare -r TMUX_HOSTNAME=$(hostname -s)
    perl -pi -e "s/USER/$USER/g" $HOME/.tmuxinator/default.yml
    perl -pi -e "s/HOSTNAME/$TMUX_HOSTNAME/g" $HOME/.tmuxinator/default.yml

}

read -p "Install files? " ans
if [[ "${ans:0:1}"  ||  "${ans:0:1}" ]]; then
    declare -r ANSWER_FILE="$HOME/.dotfiles_answers"
    if [[ -f $ANSWER_FILE ]]; then
        source $ANSWER_FILE
    else
        touch $ANSWER_FILE
    fi
    f_pre_clean
    f_set_env
    f_install
    
    # Do remainder of install steps.
    f_setup_fzf
    f_setup_git
    f_setup_github
    f_setup_rubygems
    f_setup_ssh
    f_setup_tmux
    f_setup_tmuxinator
fi
exit 0

