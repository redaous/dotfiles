#!/bin/bash

# DESCRIPTION
#
# Self extracting shell script to install Sean Malloy's dotfiles.

set -u

f_install()
{
    declare -r MATCH=$(grep --text --line-number '^PAYLOAD:$' $0 | cut -d ':' -f 1)
    declare -r PAYLOAD_START=$((MATCH + 1))
    tail -n +$PAYLOAD_START $0 | tar xzf - -C $HOME
}

f_set_env()
{
    SSH_MAJOR_VERSION=$(ssh -v 2>&1 | head -1 | awk '{print $1}' | awk -F_ '{print $NF}' | cut -b 1-3 | awk -F. '{print $1}')
    SSH_MINOR_VERSION=$(ssh -v 2>&1 | head -1 | awk '{print $1}' | awk -F_ '{print $NF}' | cut -b 1-3 | awk -F. '{print $2}')
    SSH_CMD=$(which ssh 2> /dev/null)

    GIT_CMD=$(which git 2> /dev/null)
}

f_pre_clean()
{
    # Clean Ununsed Files
    rm -f $HOME/.bash_profile
    rm -rf $HOME/.perlbrew/

    # Clean Up Used Directories Before Install
    rm -rf $HOME/.bash_files/
    rm -rf $HOME/.dzil/
    rm -rf $HOME/.terminfo/
    rm -rf $HOME/.vim/
}

f_setup_git()
{
    if [[ -n $GIT_CMD ]]; then
        read -p "Name: "  MYNAME
        read -p "Email: " MYEMAIL
        $(which git) config --global user.name  "$MYNAME"
        $(which git) config --global user.email "$MYEMAIL"
    fi
}

f_setup_github()
{
    if [[ -n $GIT_CMD ]]; then
        read -p "Setup Github? " ans
        if [[ "$ans" =  "y" ]]; then
            read -p "Name: "  GITHUB_USER
            $(which git) config --global github.user $GITHUB_USER
        else
            echo "Skipping Github Configuration!"
        fi
    fi
}

f_setup_ssh()
{
    if [[ -z $SSH_CMD ]]; then
        return 0
    fi

    # Setup jump host
    read -p "SSH Jump Host: " MYSSHJUMPHOST
    sed -i "s/JUMPHOST/$MYSSHJUMPHOST/g" $HOME/.ssh/config

    # Enable ControlPersist option
    if [[ $SSH_MAJOR_VERSION -gt 5 ]]; then
        echo "Enabling SSH ControlPersist"
        sed -i 's/\#ControlPersist/ControlPersist/g' $HOME/.ssh/config
    elif [[ $SSH_MAJOR_VERSION -eq 5 && $SSH_MINOR_VERSION -ge 6 ]]; then
        echo "Enabling SSH ControlPersist"
        sed -i 's/\#ControlPersist/ControlPersist/g' $HOME/.ssh/config
    fi
}

f_setup_tmux()
{
    if [[ $SSH_MAJOR_VERSION -gt 5 ]]; then
        echo "Enabling TMUX Proxy Command ssh -W"
        echo ""                                    >> $HOME/.tmux.conf
        echo "### DO NOT EDIT BELOW THIS LINE ###" >> $HOME/.tmux.conf
        echo "bind P command-prompt -p \"Proxy SSH Target: \" \"new-window -n %1 \\\"exec ssh -o ProxyCommand='ssh jump -W %1:22' %1\\\"\" # ssh via proxy" >> $HOME/.tmux.conf
    elif [[ $SSH_MAJOR_VERSION -eq 5 && $SSH_MINOR_VERSION -ge 4 ]]; then
        echo "Enabling TMUX Proxy Command ssh -W"
        echo ""                                    >> $HOME/.tmux.conf
        echo "### DO NOT EDIT BELOW THIS LINE ###" >> $HOME/.tmux.conf
        echo "bind P command-prompt -p \"Proxy SSH Target: \" \"new-window -n %1 \\\"exec ssh -o ProxyCommand='ssh jump -W %1:22' %1\\\"\" # ssh via proxy" >> $HOME/.tmux.conf
    else
        echo "Enabling TMUX Proxy Command nc"
        echo ""                                    >> $HOME/.tmux.conf
        echo "### DO NOT EDIT BELOW THIS LINE ###" >> $HOME/.tmux.conf
        echo "bind P command-prompt -p \"Proxy SSH Target: \" \"new-window -n %1 \\\"exec ssh -o ProxyCommand='ssh jump nc %h 22' %1\\\"\" # ssh via proxy" >> $HOME/.tmux.conf
    fi
}

f_setup_tmuxinator()
{
    echo "Configuring Tmuxinator Project: default"
    declare -r TMUX_HOSTNAME=$(hostname -s)
    perl -pi -e "s/USER/$USER/g" $HOME/.tmuxinator/default.yml
    perl -pi -e "s/HOSTNAME/$TMUX_HOSTNAME/g" $HOME/.tmuxinator/default.yml

}

read -p "Install files? " ans
if [[ "${ans:0:1}"  ||  "${ans:0:1}" ]]; then
    f_pre_clean
    f_set_env
    f_install
    
    # Do remainder of install steps.
    f_setup_git
    f_setup_github
    f_setup_ssh
    f_setup_tmux
    f_setup_tmuxinator
fi
exit 0

